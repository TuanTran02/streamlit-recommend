import streamlit as st
import pandas as pd
from num2words import num2words
import base64
import requests

def app():

    st.header('ƒê·ªÅ xu·∫•t')

    df = pd.read_excel('combined_data.xlsx')

    col1 = st.sidebar
    def sidebar_bg(img_url):
        side_bg_ext = 'jpg'  # Assuming the image format is PNG (can be adjusted if needed)

        # Retrieve image data from URL
        response = st.cache_resource(requests.get)(img_url, stream=True)
        img_data = response.content

        # Encode image data as base64
        encoded_data = base64.b64encode(img_data).decode()

        # Apply background image style to sidebar
        st.markdown(
            f"""
            <style>
            [data-testid="stSidebar"] > div:first-child {{
                background: url(data:image/{side_bg_ext};base64,{encoded_data});
                background-size: cover;  /* Adjust background sizing as needed */
            }}
            </style>
            """,
            unsafe_allow_html=True,
        )

    # Example usage with a valid image URL
    # img_url = "https://images.rawpixel.com/image_800/cHJpdmF0ZS9sci9pbWFnZXMvd2Vic2l0ZS8yMDIzLTEwL3Jhd3BpeGVsb2ZmaWNlM19taW5pbWFsX2ZsYXRfdmVjdG9yX2Flc3RoZXRpY19pbGx1c3RyYXRpb25fb2ZfYV9hYWMyODk1Ny02ODI3LTQ3OGUtOTQ2Ni0wNWI0MzVhYjk2MmQtYi5qcGc.jpg"  # Replace with your desired image URL
    img_url = "https://4kwallpapers.com/images/wallpapers/porsche-918-spyder-1290x2796-13004.jpg"  # Replace with your desired image URL
    sidebar_bg(img_url)


    col2, col3, col4 = st.columns((1, 1, 1))  # Chia layout th√†nh 3 c·ªôt

    with col1:
        # Widget ƒë·ªÉ ch·ªçn T√¨nh Tr·∫°ng xe
        selected_state = col1.multiselect("Ch·ªçn T√¨nh tr·∫°ng xe:", options=df['T√¨nh tr·∫°ng'].unique())
        if selected_state:
                filtered_brands = df.loc[(df['T√¨nh tr·∫°ng'].isin(selected_state)), 'H√£ng xe'].unique()
        else:
            filtered_brands = df['H√£ng xe'].unique()
            
        selected_brands = st.multiselect("Ch·ªçn H√£ng xe:", filtered_brands)
        # L·ªçc D√≤ng xe d·ª±a tr√™n H√£ng xe ƒë√£ ch·ªçn
        filtered_vehicles = df.loc[df['H√£ng xe'].isin(selected_brands), 'D√≤ng xe'].unique()
        # Widget ƒë·ªÉ ch·ªçn D√≤ng xe
        selected_vehicles = st.multiselect("Ch·ªçn D√≤ng xe:", filtered_vehicles)
        
        if selected_brands:
            if selected_vehicles:
                # L·ªçc Ki·ªÉu d√°ng d·ª±a tr√™n D√≤ng xe ƒë√£ ch·ªçn
                filtered_styles = df.loc[(df['D√≤ng xe'].isin(selected_vehicles)), 'Ki·ªÉu d√°ng'].unique()
            else:
                # L·ªçc Ki·ªÉu d√°ng d·ª±a tr√™n H√£ng xe ƒë√£ ch·ªçn
                filtered_styles = df.loc[(df['H√£ng xe'].isin(selected_brands)), 'Ki·ªÉu d√°ng'].unique()
        else:
            filtered_styles = df['Ki·ªÉu d√°ng'].unique()
        # Widget ƒë·ªÉ ch·ªçn Ki·ªÉu d√°ng
        selected_styles = st.multiselect("Ch·ªçn Ki·ªÉu d√°ng:", filtered_styles)
        # Widget ƒë·ªÉ ch·ªçn NƒÉm sx
        if selected_state == 'Xe C≈©' or selected_state == 'Xe c≈©':
            if selected_brands:
                if selected_vehicles:
                # L·ªçc Ki·ªÉu d√°ng d·ª±a tr√™n D√≤ng xe ƒë√£ ch·ªçn
                    filtered_year = df.loc[(df['D√≤ng xe'].isin(selected_vehicles)), 'NƒÉm SX'].unique()
                else:
                    # L·ªçc Ki·ªÉu d√°ng d·ª±a tr√™n H√£ng xe ƒë√£ ch·ªçn
                    filtered_year = df.loc[(df['H√£ng xe'].isin(selected_brands)), 'NƒÉm SX'].unique()
        else:
            filtered_year = df['NƒÉm SX'].unique()
        selected_year = st.multiselect("Ch·ªçn NƒÉm s·∫£n xu·∫•t:", filtered_year)
        
        # Widget ƒë·ªÉ ch·ªçn Nhi√™n li·ªáu 
        if selected_brands:
            if selected_vehicles:
            # L·ªçc Ki·ªÉu d√°ng d·ª±a tr√™n D√≤ng xe ƒë√£ ch·ªçn
                filtered_fuel = df.loc[(df['D√≤ng xe'].isin(selected_vehicles)), 'Nhi√™n li·ªáu'].unique()
            else:
                # L·ªçc Ki·ªÉu d√°ng d·ª±a tr√™n H√£ng xe ƒë√£ ch·ªçn
                filtered_fuel = df.loc[(df['H√£ng xe'].isin(selected_brands)), 'Nhi√™n li·ªáu'].unique()
        else:
            filtered_fuel = df['Nhi√™n li·ªáu'].unique()
        selected_segment = st.multiselect("Ch·ªçn Nhi√™n li·ªáu:", filtered_fuel)
        
        # Widget ƒë·ªÉ ch·ªçn H·ªôp s·ªë 
        if selected_brands:
            if selected_vehicles:
            # L·ªçc Ki·ªÉu d√°ng d·ª±a tr√™n D√≤ng xe ƒë√£ ch·ªçn
                filtered_hopso = df.loc[(df['D√≤ng xe'].isin(selected_vehicles)), 'H·ªôp s·ªë'].unique()
            else:
                # L·ªçc Ki·ªÉu d√°ng d·ª±a tr√™n H√£ng xe ƒë√£ ch·ªçn
                filtered_hopso = df.loc[(df['H√£ng xe'].isin(selected_brands)), 'H·ªôp s·ªë'].unique()
        else:
            filtered_hopso = df['H·ªôp s·ªë'].unique()
        selected_hopso = st.multiselect("Ch·ªçn H·ªôp s·ªë:", filtered_hopso)
        
        # Widget ƒë·ªÉ ch·ªçn S·ªë ch·ªó ng·ªìi
        if selected_brands:
            if selected_vehicles:
            # L·ªçc Ki·ªÉu d√°ng d·ª±a tr√™n D√≤ng xe ƒë√£ ch·ªçn
                filtered_seat = df.loc[(df['D√≤ng xe'].isin(selected_vehicles)), 'S·ªë ch·ªó ng·ªìi'].unique()
            else:
                # L·ªçc Ki·ªÉu d√°ng d·ª±a tr√™n H√£ng xe ƒë√£ ch·ªçn
                filtered_seat = df.loc[(df['H√£ng xe'].isin(selected_brands)), 'S·ªë ch·ªó ng·ªìi'].unique()
        else:
            filtered_seat = df['S·ªë ch·ªó ng·ªìi'].unique()
        selected_seat = st.multiselect("Ch·ªçn S·ªë ch·ªó ng·ªìi:", filtered_seat)
    # N√∫t l·ªçc
    filter_button = col1.button("Search üîç")
    
    with col2, col3, col4:
        # N·∫øu n√∫t l·ªçc ƒë∆∞·ª£c nh·∫•n
        if filter_button:
            if selected_brands or selected_vehicles or selected_styles or selected_state or selected_segment or selected_hopso or selected_seat or selected_year: #or (selected_km_min and selected_km_max):
                # Kh·ªüi t·∫°o ƒëi·ªÅu ki·ªán l·ªçc
                mask = pd.Series([True] * len(df))
                
                # L·ªçc DataFrame d·ª±a tr√™n c√°c l·ª±a ch·ªçn
                if selected_state:
                    mask &= df['T√¨nh tr·∫°ng'].isin(selected_state)
                if selected_brands:
                    mask &= df['H√£ng xe'].isin(selected_brands)
                if selected_vehicles:
                    mask &= df['D√≤ng xe'].isin(selected_vehicles)
                if selected_styles:
                    mask &= df['Ki·ªÉu d√°ng'].isin(selected_styles)
                if selected_segment:
                    mask &= df['Nhi√™n li·ªáu'].isin(selected_segment)
                if selected_hopso:
                    mask &= df['H·ªôp s·ªë'].isin(selected_hopso)
                if selected_seat:
                    mask &= df['S·ªë ch·ªó ng·ªìi'].isin(selected_seat)
                if selected_year:
                    mask &= df['NƒÉm SX'].isin(selected_year)
                    
                # if selected_km_min and selected_km_max:
                #     mask = (df['Km ƒë√£ ƒëi'] >= selected_km_min) & (df['Km ƒë√£ ƒëi'] <= selected_km_max)

                filtered_df = df[mask]
                
                # Reset index
                filtered_df = filtered_df.reset_index(drop=True)
                
                if filtered_df.shape[0] == 0:
                    st.error("***No result is found***\n\n Please select üîª / re-enter üí¨    üßê")
                else: 
                    # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng features
                    st.write("Number of cars found: ", filtered_df.shape[0])

                    # Hi·ªÉn th·ªã h√¨nh ·∫£nh, t√™n xe v√† ƒë∆°n gi√°
                    count = 0
                    cols = [col2, col3, col4]
                    for index, row in filtered_df.iterrows():
                        count = count + 1
                        col_index = (count - 1) % 3
                        col = cols[col_index]
                        col.image(row['Image_URL'], caption=row['T√™n Xe'])
                        col.subheader("Chi ti·∫øt xe:")
                        col.text("- H·ªôp s·ªë: " + str(row['H·ªôp s·ªë']))
                        col.text("- Nhi√™n li·ªáu: " + str(row['Nhi√™n li·ªáu']))
                        col.text("- T√¨nh tr·∫°ng: " + str(row['T√¨nh tr·∫°ng']))
                        if row['T√¨nh tr·∫°ng'] == 'Xe M·ªõi' or row['T√¨nh tr·∫°ng'] == 'Xe m·ªõi':
                            col.text("- S·ªë ch·ªó ng·ªìi: " + str(row['S·ªë ch·ªó ng·ªìi']) + ' ch·ªó')
                        else: 
                            col.text("- Km ƒë√£ ƒëi: " + str(row['Km ƒë√£ ƒëi']) + ' KM')
                        col.text('')  # Th√™m m·ªôt d√≤ng tr·ªëng ƒë·ªÉ t·∫°o kho·∫£ng c√°ch                        
                        # Chia th√†nh 2 c·ªôt
                        with col:
                            # Button with bold text using markdown syntax
                            button_content = f"**Select**"

                            # Button styling using inline CSS
                            button_style = """
                            <style>
                                .buy-button {
                                background-color: #CBEAF5;
                                color: white;
                                padding: 5px 10px;
                                border: none;
                                border-radius: 10px;
                                float: right;
                                cursor: pointer;
                                text-decoration: none;
                                font-weight: normal !important;
                                }
                            </style>
                            """
                            # Combine button content, link, and style
                            content = f"""{button_style}
                            <a class="buy-button" href="{row['Link xe']}" target="_blank">{button_content}</a>
                            """
                            # Display content with unsafe_allow_html for button styling
                            st.markdown(content, unsafe_allow_html=True)
                            
                        col.text("-" * 10)
            else:
                st.error("***No result is found***\n\n Please select üîª / re-enter üí¨    üßê")


